@model IEnumerable<EL.Models.Adres>

<script src="http://maps.google.com/maps/api/js?key=AIzaSyBRDARZNgfAFFpH5UmQTGDsIfMSfbfo498&sensor=true&libraries=places" type="text/javascript"></script>
<script>

</script>
<style>
    #map_canvas img {
        max-width: none;
    }
</style>

<!-- This css is to give a nice big popup "info window" when a marker is clicked on the map -->
<style>
    .infoDiv {
        height: 200px;
        width: 300px;
        -webkit-user-select: none;
        background-color: white;
    }
</style>
<br />
<!-- This is the div that will contain the Google Map -->
    <div>
        @Html.ActionLink("Alle clubs", "Index", "Clubs", null, new { style = "color:cornflowerblue;" })
    </div><br /><br />
    <div>
        <p style="color:cornflowerblue;">Dichtsbijzijnde club vinden aan de hand van een adres:</p>
        @Html.TextBox("txtSearch", null, new { @placeholder = "Geef uw adres", style = "width:100%;" })
    </div>
    <div id="map_canvas" style="height:600px;margin-top:10px;"></div>

<!-- Enclose the Javascript in a "section" so that it is rendered in the correct order after scripts have been loaded etc -->
@section scripts {
    <section class="scripts">
        
            <script type="text/javascript">

        @* This code tells the browser to execute the "Initialize" method only when the complete document model has been loaded.*@
            $(document).ready(function () {
                Initialize();
            });

            // Where all the fun happens
            function Initialize() {


                // Google has tweaked their interface somewhat - this tells the api to use that new UI
                google.maps.visualRefresh = true;
                var BE_center = new google.maps.LatLng(50.500342, 4.317424);

                // These are options that set initial zoom level, where the map is centered globally to start, and the type of map to show
                var mapOptions = {
                    zoom: 8,
                    center: BE_center,
                    mapTypeId: google.maps.MapTypeId.G_NORMAL_MAP
                };

                // This makes the div with id "map_canvas" a google map
                var map = new google.maps.Map(document.getElementById("map_canvas"), mapOptions);

                // a sample list of JSON encoded data of places to visit in Tunisia
                // you can either make up a JSON list server side, or call it from a controller using JSONResult

                $.ajax({
                    type: "GET",
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    url: "http://localhost:12190/Home/GetData",
                    success: function (data) {

                        if (data === null)
                        {
                            alert("Er was een probleem met het laden van de clubs!")
                        }

                        // Using the JQuery "each" selector to iterate through the JSON list and drop marker pins
                        $.each(data, function (i, item) {
                            console.log(item.Latitude);
                            var marker = new google.maps.Marker({
                                'position': new google.maps.LatLng(item.Latitude, item.Longitude),
                                'map': map,
                                'title': item.Beschrijving
                            });
                            var iconEagleFit = {
                                url: '~/Images/iron-eagle-icon.jpg'
                            }

                            
                        // Make the marker-pin purple!
                        marker.setIcon('http://maps.google.com/mapfiles/ms/micons/purple.png')

                        // put in some information about each json object - in this case, the opening hours.
                        var infowindow = new google.maps.InfoWindow({
                            content: item.Beschrijving + "<hr>" + item.Straat + " " + item.Huisnummer + "<br>" + item.Postcode + " " + item.Gemeente
                        });


                        // finally hook up an "OnClick" listener to the map so it pops up out info-window when the marker-pin is clicked!
                        google.maps.event.addListener(marker, 'click', function () {
                            infowindow.open(map, marker);
                        });

                        })

                        var trafficLayer = new google.maps.TrafficLayer();
                        trafficLayer.setMap(map);

                        var input = document.getElementById('txtSearch');
                        var searchBox = new google.maps.places.SearchBox(input);


                        map.addListener('bounds_changed', function () {
                            searchBox.setBounds(map.getBounds());
                        });

                        var markers = [];

                        searchBox.addListener('places_changed', function() {
                            var places = searchBox.getPlaces();

                            if (places.length == 0) {
                                return;
                            }

                            markers.forEach(function(marker) {
                                marker.setMap(null);
                            });
                            markers = [];
                            var bounds = new google.maps.LatLngBounds();
                            places.forEach(function(place) {
                                if (!place.geometry) {
                                    console.log("Returned place contains no geometry");
                                    return;
                                }
                                var icon = {
                                    url: 'https://maps.google.com/mapfiles/kml/shapes/ranger_station.png',
                                    size: new google.maps.Size(71, 71),
                                    origin: new google.maps.Point(0, 0),
                                    anchor: new google.maps.Point(17, 34),
                                    scaledSize: new google.maps.Size(25, 25)
                                };

                                // Create a marker for each place.
                                markers.push(new google.maps.Marker({
                                    map: map,
                                    icon: icon,
                                    title: place.name,
                                    position: place.geometry.location
                                }));

                                if (place.geometry.viewport) {
                                    // Only geocodes have viewport.
                                    bounds.union(place.geometry.viewport);
                                } else {
                                    bounds.extend(place.geometry.location);
                                }
                            });
                            map.fitBounds(bounds);
                        });
                    }
                })
            }



        </script>
</section>



}